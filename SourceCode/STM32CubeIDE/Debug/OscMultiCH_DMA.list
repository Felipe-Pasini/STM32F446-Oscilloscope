
OscMultiCH_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f8  080050f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080050f8  080050f8  000150f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005100  08005100  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016104  20000014  0800511c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20016118  0800511c  00026118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff9a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002874  00000000  00000000  0002ffde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002320d  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012526  00000000  00000000  000576ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9369  00000000  00000000  00069bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142f3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  00142f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080050a0 	.word	0x080050a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080050a0 	.word	0x080050a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800051a:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <MX_ADC1_Init+0xb8>)
 800051c:	4a29      	ldr	r2, [pc, #164]	; (80005c4 <MX_ADC1_Init+0xbc>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800052c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000530:	2201      	movs	r2, #1
 8000532:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000536:	2200      	movs	r2, #0
 8000538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_ADC1_Init+0xb8>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_ADC1_Init+0xb8>)
 800054c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_ADC1_Init+0xb8>)
 800055a:	2203      	movs	r2, #3
 800055c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000560:	2201      	movs	r2, #1
 8000562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_ADC1_Init+0xb8>)
 8000568:	2201      	movs	r2, #1
 800056a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056c:	4814      	ldr	r0, [pc, #80]	; (80005c0 <MX_ADC1_Init+0xb8>)
 800056e:	f001 f8c1 	bl	80016f4 <HAL_ADC_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000578:	f000 feac 	bl	80012d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800057c:	2301      	movs	r3, #1
 800057e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000580:	2302      	movs	r3, #2
 8000582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_ADC1_Init+0xb8>)
 800058e:	f001 fb63 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000598:	f000 fe9c 	bl	80012d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800059c:	2304      	movs	r3, #4
 800059e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_ADC1_Init+0xb8>)
 80005aa:	f001 fb55 	bl	8001c58 <HAL_ADC_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005b4:	f000 fe8e 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000030 	.word	0x20000030
 80005c4:	40012000 	.word	0x40012000

080005c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a31      	ldr	r2, [pc, #196]	; (80006ac <HAL_ADC_MspInit+0xe4>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d15c      	bne.n	80006a4 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	4b30      	ldr	r3, [pc, #192]	; (80006b0 <HAL_ADC_MspInit+0xe8>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	4a2f      	ldr	r2, [pc, #188]	; (80006b0 <HAL_ADC_MspInit+0xe8>)
 80005f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f8:	6453      	str	r3, [r2, #68]	; 0x44
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <HAL_ADC_MspInit+0xe8>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <HAL_ADC_MspInit+0xe8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a28      	ldr	r2, [pc, #160]	; (80006b0 <HAL_ADC_MspInit+0xe8>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <HAL_ADC_MspInit+0xe8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000622:	2313      	movs	r3, #19
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000626:	2303      	movs	r3, #3
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	481f      	ldr	r0, [pc, #124]	; (80006b4 <HAL_ADC_MspInit+0xec>)
 8000636:	f002 fadd 	bl	8002bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 800063c:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <HAL_ADC_MspInit+0xf4>)
 800063e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000658:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800065a:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000666:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000674:	2200      	movs	r2, #0
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 800067a:	f001 feb9 	bl	80023f0 <HAL_DMA_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000684:	f000 fe26 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_ADC_MspInit+0xf0>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2012      	movs	r0, #18
 800069a:	f001 fe72 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800069e:	2012      	movs	r0, #18
 80006a0:	f001 fe8b 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40012000 	.word	0x40012000
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	20000078 	.word	0x20000078
 80006bc:	40026410 	.word	0x40026410

080006c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_DMA_Init+0x3c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <MX_DMA_Init+0x3c>)
 80006d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_DMA_Init+0x3c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2038      	movs	r0, #56	; 0x38
 80006e8:	f001 fe4b 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ec:	2038      	movs	r0, #56	; 0x38
 80006ee:	f001 fe64 	bl	80023ba <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800

08000700 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xd4>)
 800078c:	f002 fbc6 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_GPIO_Init+0xdc>)
 80007a6:	f002 fa25 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007aa:	2320      	movs	r3, #32
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xd4>)
 80007c2:	f002 fa17 	bl	8002bf4 <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	10210000 	.word	0x10210000
 80007dc:	40020800 	.word	0x40020800

080007e0 <GetSamplesAuto>:
 * @brief Checks the number of samples to be sent via serial based on the signal period
 * Also defines the Init_Value (from which the samples shal be sent).
 * @retval int HAL_OK
 */
int GetSamplesAuto (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
	int Max_Period = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]

	for(channel=0;channel<Number_of_Channels;channel++)///Checks the maximum period between all channels
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <GetSamplesAuto+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
 80007f0:	e015      	b.n	800081e <GetSamplesAuto+0x3e>
	{
		if(period[channel]>Max_Period)Max_Period=period[channel];
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <GetSamplesAuto+0xe8>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <GetSamplesAuto+0xec>)
 80007fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d906      	bls.n	8000812 <GetSamplesAuto+0x32>
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <GetSamplesAuto+0xe8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <GetSamplesAuto+0xec>)
 800080c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000810:	607b      	str	r3, [r7, #4]
	for(channel=0;channel<Number_of_Channels;channel++)///Checks the maximum period between all channels
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <GetSamplesAuto+0xe8>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <GetSamplesAuto+0xe8>)
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <GetSamplesAuto+0xe8>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <GetSamplesAuto+0xf0>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	429a      	cmp	r2, r3
 8000828:	d3e3      	bcc.n	80007f2 <GetSamplesAuto+0x12>
	}

	if(Max_Period==0)Max_Period=MAX_NUM_OF_CONVERSIONS;///If a complete period could not be found in any channel, sends all samples
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <GetSamplesAuto+0x56>
 8000830:	f242 7310 	movw	r3, #10000	; 0x2710
 8000834:	607b      	str	r3, [r7, #4]

	if(Max_Period>(MAX_NUM_OF_CONVERSIONS/2))///If the period is more than 50% of the samples, sends all samples
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f241 3288 	movw	r2, #5000	; 0x1388
 800083c:	4293      	cmp	r3, r2
 800083e:	dd07      	ble.n	8000850 <GetSamplesAuto+0x70>
	{
		Number_of_Samples=MAX_NUM_OF_CONVERSIONS;
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <GetSamplesAuto+0xf4>)
 8000842:	f242 7210 	movw	r2, #10000	; 0x2710
 8000846:	601a      	str	r2, [r3, #0]
		Init_Value=0;
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <GetSamplesAuto+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e033      	b.n	80008b8 <GetSamplesAuto+0xd8>
	}else if(Max_Period>(MAX_NUM_OF_CONVERSIONS/10))///If the period is between 10% and 50% of total samples, sends 2 periods of samples
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000856:	dd16      	ble.n	8000886 <GetSamplesAuto+0xa6>
	{
		Number_of_Samples=2*Max_Period;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	461a      	mov	r2, r3
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <GetSamplesAuto+0xf4>)
 8000860:	601a      	str	r2, [r3, #0]

		//2 periods + first minimum value gets over the total number of samples?
		if((position[MIN][0][0]+Number_of_Samples)>MAX_NUM_OF_CONVERSIONS)
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <GetSamplesAuto+0xfc>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <GetSamplesAuto+0xf4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
 800086c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000870:	4293      	cmp	r3, r2
 8000872:	d903      	bls.n	800087c <GetSamplesAuto+0x9c>
		{
			Init_Value=0;//then, samples shall be sent from point 0
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <GetSamplesAuto+0xf8>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	e01d      	b.n	80008b8 <GetSamplesAuto+0xd8>
		} else
		{
			Init_Value=position[MIN][0][0];//if not, samples are sent starting at the first minimum point
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <GetSamplesAuto+0xfc>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <GetSamplesAuto+0xf8>)
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	e018      	b.n	80008b8 <GetSamplesAuto+0xd8>
		}
	}else if(Max_Period>(MAX_NUM_OF_CONVERSIONS/20))///If the period is between 5% and 10% of the total samples, sends 2000 samples
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800088c:	dd08      	ble.n	80008a0 <GetSamplesAuto+0xc0>
	{
		Number_of_Samples=(MAX_NUM_OF_CONVERSIONS/5);
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <GetSamplesAuto+0xf4>)
 8000890:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000894:	601a      	str	r2, [r3, #0]
		Init_Value=position[MIN][0][0];
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <GetSamplesAuto+0xfc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <GetSamplesAuto+0xf8>)
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e00b      	b.n	80008b8 <GetSamplesAuto+0xd8>
	}else if(Max_Period<=(MAX_NUM_OF_CONVERSIONS/20))///If the period is lower than 5% of the total samples, sends 1000 samples
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008a6:	dc07      	bgt.n	80008b8 <GetSamplesAuto+0xd8>
	{
		Number_of_Samples=(MAX_NUM_OF_CONVERSIONS/10);
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <GetSamplesAuto+0xf4>)
 80008aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ae:	601a      	str	r2, [r3, #0]
		Init_Value=position[MIN][0][0];
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <GetSamplesAuto+0xfc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <GetSamplesAuto+0xf8>)
 80008b6:	6013      	str	r3, [r2, #0]
	}


	return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20007610 	.word	0x20007610
 80008cc:	20007618 	.word	0x20007618
 80008d0:	20000004 	.word	0x20000004
 80008d4:	200000dc 	.word	0x200000dc
 80008d8:	20016084 	.word	0x20016084
 80008dc:	20007624 	.word	0x20007624

080008e0 <Transmit>:
/**
 *@brief Transmit data using serial port
 *@retval int Hal_OK
 */
int Transmit (void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	unsigned int cont=0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]

	if(N_Samples_is_Set==FALSE)///if the number of samples was not set by the user
 80008ea:	4b3c      	ldr	r3, [pc, #240]	; (80009dc <Transmit+0xfc>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <Transmit+0x18>
	{
		GetSamplesAuto();
 80008f2:	f7ff ff75 	bl	80007e0 <GetSamplesAuto>
 80008f6:	e002      	b.n	80008fe <Transmit+0x1e>
	}else
	{
		Init_Value=0;///if the user set the number of samples, sends that amount of samples, beginning on the first one
 80008f8:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <Transmit+0x100>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
	}

	for(channel=0;channel<Number_of_Channels;channel++)///Sends each channel period
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <Transmit+0x104>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e014      	b.n	8000930 <Transmit+0x50>
	{
		pointer=&period[channel];
 8000906:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <Transmit+0x104>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4a36      	ldr	r2, [pc, #216]	; (80009e8 <Transmit+0x108>)
 800090e:	4413      	add	r3, r2
 8000910:	4a36      	ldr	r2, [pc, #216]	; (80009ec <Transmit+0x10c>)
 8000912:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, pointer, 2, COM_TIMEOUT);
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <Transmit+0x10c>)
 8000916:	6819      	ldr	r1, [r3, #0]
 8000918:	f242 7310 	movw	r3, #10000	; 0x2710
 800091c:	2202      	movs	r2, #2
 800091e:	4834      	ldr	r0, [pc, #208]	; (80009f0 <Transmit+0x110>)
 8000920:	f003 fccb 	bl	80042ba <HAL_UART_Transmit>
	for(channel=0;channel<Number_of_Channels;channel++)///Sends each channel period
 8000924:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <Transmit+0x104>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <Transmit+0x104>)
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <Transmit+0x104>)
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <Transmit+0x114>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	d3e4      	bcc.n	8000906 <Transmit+0x26>
	}

	pointer=&Number_of_Samples;///Sends the number of samples to be sent
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <Transmit+0x10c>)
 800093e:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <Transmit+0x118>)
 8000940:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, pointer, 2, COM_TIMEOUT);
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <Transmit+0x10c>)
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	f242 7310 	movw	r3, #10000	; 0x2710
 800094a:	2202      	movs	r2, #2
 800094c:	4828      	ldr	r0, [pc, #160]	; (80009f0 <Transmit+0x110>)
 800094e:	f003 fcb4 	bl	80042ba <HAL_UART_Transmit>


	pointer=&array[Init_Value];///Sends the samples
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <Transmit+0x100>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <Transmit+0x11c>)
 8000958:	4413      	add	r3, r2
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <Transmit+0x10c>)
 800095c:	6013      	str	r3, [r2, #0]
	for (cont=0;cont<(Number_of_Samples*Number_of_Channels);cont++)
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e026      	b.n	80009b2 <Transmit+0xd2>
	{
		HAL_UART_Transmit(&huart2, pointer, 1, COM_TIMEOUT);
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <Transmit+0x10c>)
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	f242 7310 	movw	r3, #10000	; 0x2710
 800096c:	2201      	movs	r2, #1
 800096e:	4820      	ldr	r0, [pc, #128]	; (80009f0 <Transmit+0x110>)
 8000970:	f003 fca3 	bl	80042ba <HAL_UART_Transmit>
		pointer++;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <Transmit+0x10c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <Transmit+0x10c>)
 800097c:	6013      	str	r3, [r2, #0]

		/**During transmission, timed pauses are made in the data sending,
		 * to adjust the clock and avoid transmission errors
		 * (theoretical baudrate is not the same as the practical, occasioning in loss of data)
		 */
		if(cont%1000==0)
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <Transmit+0x120>)
 8000982:	fba3 1302 	umull	r1, r3, r3, r2
 8000986:	099b      	lsrs	r3, r3, #6
 8000988:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800098c:	fb01 f303 	mul.w	r3, r1, r3
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10a      	bne.n	80009ac <Transmit+0xcc>
		{
			for(int aux=0;aux<BAUD_115200_WAIT_TIME;aux++){}
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	e002      	b.n	80009a2 <Transmit+0xc2>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80009a8:	4293      	cmp	r3, r2
 80009aa:	ddf7      	ble.n	800099c <Transmit+0xbc>
	for (cont=0;cont<(Number_of_Samples*Number_of_Channels);cont++)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <Transmit+0x114>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <Transmit+0x118>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3ce      	bcc.n	8000964 <Transmit+0x84>
		}
	}

	cont=0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
	pointer=&data;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <Transmit+0x10c>)
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <Transmit+0x124>)
 80009ce:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 80009d0:	2300      	movs	r3, #0

}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000da 	.word	0x200000da
 80009e0:	20016084 	.word	0x20016084
 80009e4:	20007610 	.word	0x20007610
 80009e8:	20007618 	.word	0x20007618
 80009ec:	20000000 	.word	0x20000000
 80009f0:	200160d0 	.word	0x200160d0
 80009f4:	20000004 	.word	0x20000004
 80009f8:	200000dc 	.word	0x200000dc
 80009fc:	200000e0 	.word	0x200000e0
 8000a00:	10624dd3 	.word	0x10624dd3
 8000a04:	200000d8 	.word	0x200000d8

08000a08 <WaveAnalysis>:
 * @brief Analises the collected samples, obtaining, for each channel, the period of the signal
 * @retval int HAL_OK
 */

int WaveAnalysis(void)
{
 8000a08:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a0c:	b096      	sub	sp, #88	; 0x58
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	466b      	mov	r3, sp
 8000a12:	469c      	mov	ip, r3
	int aux=0;///auxiliary variable
 8000a14:	2300      	movs	r3, #0
 8000a16:	64bb      	str	r3, [r7, #72]	; 0x48
	unsigned int cont_min=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	unsigned int cont_max=0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	653b      	str	r3, [r7, #80]	; 0x50
	unsigned int diff_bw_min[Number_of_Channels];
 8000a20:	4bb7      	ldr	r3, [pc, #732]	; (8000d00 <WaveAnalysis+0x2f8>)
 8000a22:	781e      	ldrb	r6, [r3, #0]
 8000a24:	4633      	mov	r3, r6
 8000a26:	3b01      	subs	r3, #1
 8000a28:	647b      	str	r3, [r7, #68]	; 0x44
 8000a2a:	b2f3      	uxtb	r3, r6
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	4611      	mov	r1, r2
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	014b      	lsls	r3, r1, #5
 8000a3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000a40:	0142      	lsls	r2, r0, #5
 8000a42:	b2f3      	uxtb	r3, r6
 8000a44:	2200      	movs	r2, #0
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	016b      	lsls	r3, r5, #5
 8000a54:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a58:	0162      	lsls	r2, r4, #5
 8000a5a:	4633      	mov	r3, r6
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	3307      	adds	r3, #7
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	ebad 0d03 	sub.w	sp, sp, r3
 8000a68:	466b      	mov	r3, sp
 8000a6a:	3303      	adds	r3, #3
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	643b      	str	r3, [r7, #64]	; 0x40
	unsigned int diff_bw_max[Number_of_Channels];
 8000a72:	4ba3      	ldr	r3, [pc, #652]	; (8000d00 <WaveAnalysis+0x2f8>)
 8000a74:	7819      	ldrb	r1, [r3, #0]
 8000a76:	460b      	mov	r3, r1
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a7c:	b2cb      	uxtb	r3, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4698      	mov	r8, r3
 8000a82:	4691      	mov	r9, r2
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000a90:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000a94:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000a98:	b2cb      	uxtb	r3, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	469a      	mov	sl, r3
 8000a9e:	4693      	mov	fp, r2
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000aac:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000ab0:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	3307      	adds	r3, #7
 8000aba:	08db      	lsrs	r3, r3, #3
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	ebad 0d03 	sub.w	sp, sp, r3
 8000ac2:	466b      	mov	r3, sp
 8000ac4:	3303      	adds	r3, #3
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38

	unsigned char Next_is=MIN;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	unsigned char value[2][Number_of_Channels];
 8000ad2:	4b8b      	ldr	r3, [pc, #556]	; (8000d00 <WaveAnalysis+0x2f8>)
 8000ad4:	7818      	ldrb	r0, [r3, #0]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
 8000adc:	b2c3      	uxtb	r3, r0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	623b      	str	r3, [r7, #32]
 8000ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000af0:	4629      	mov	r1, r5
 8000af2:	00cb      	lsls	r3, r1, #3
 8000af4:	4621      	mov	r1, r4
 8000af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000afa:	4621      	mov	r1, r4
 8000afc:	00ca      	lsls	r2, r1, #3
 8000afe:	4601      	mov	r1, r0
 8000b00:	b2c3      	uxtb	r3, r0
 8000b02:	2200      	movs	r2, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	61fa      	str	r2, [r7, #28]
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8000b14:	4634      	mov	r4, r6
 8000b16:	0123      	lsls	r3, r4, #4
 8000b18:	462c      	mov	r4, r5
 8000b1a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000b1e:	462c      	mov	r4, r5
 8000b20:	0122      	lsls	r2, r4, #4
 8000b22:	b2c3      	uxtb	r3, r0
 8000b24:	2200      	movs	r2, #0
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	617a      	str	r2, [r7, #20]
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8000b36:	4634      	mov	r4, r6
 8000b38:	0123      	lsls	r3, r4, #4
 8000b3a:	462c      	mov	r4, r5
 8000b3c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000b40:	462c      	mov	r4, r5
 8000b42:	0122      	lsls	r2, r4, #4
 8000b44:	4603      	mov	r3, r0
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	3307      	adds	r3, #7
 8000b4a:	08db      	lsrs	r3, r3, #3
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000b52:	466b      	mov	r3, sp
 8000b54:	3300      	adds	r3, #0
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
	unsigned char margin[Number_of_Channels];
 8000b58:	4b69      	ldr	r3, [pc, #420]	; (8000d00 <WaveAnalysis+0x2f8>)
 8000b5a:	7818      	ldrb	r0, [r3, #0]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b62:	b2c3      	uxtb	r3, r0
 8000b64:	2200      	movs	r2, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	60fa      	str	r2, [r7, #12]
 8000b6a:	f04f 0200 	mov.w	r2, #0
 8000b6e:	f04f 0300 	mov.w	r3, #0
 8000b72:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000b76:	4634      	mov	r4, r6
 8000b78:	00e3      	lsls	r3, r4, #3
 8000b7a:	462c      	mov	r4, r5
 8000b7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b80:	462c      	mov	r4, r5
 8000b82:	00e2      	lsls	r2, r4, #3
 8000b84:	b2c3      	uxtb	r3, r0
 8000b86:	2200      	movs	r2, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e9d7 5600 	ldrd	r5, r6, [r7]
 8000b98:	4634      	mov	r4, r6
 8000b9a:	00e3      	lsls	r3, r4, #3
 8000b9c:	462c      	mov	r4, r5
 8000b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ba2:	462c      	mov	r4, r5
 8000ba4:	00e2      	lsls	r2, r4, #3
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	3307      	adds	r3, #7
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb2:	466b      	mov	r3, sp
 8000bb4:	3300      	adds	r3, #0
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28

	for (channel=0;channel<Number_of_Channels;channel++)///course through all channels
 8000bb8:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e1d8      	b.n	8000f72 <WaveAnalysis+0x56a>
	{
		value[MIN][channel]=255;
 8000bc0:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc8:	20ff      	movs	r0, #255	; 0xff
 8000bca:	5498      	strb	r0, [r3, r2]
		value[MAX][channel]=0;
 8000bcc:	4b4d      	ldr	r3, [pc, #308]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd4:	4413      	add	r3, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
		diff_bw_max[channel]=0;
 8000bdc:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000be4:	2200      	movs	r2, #0
 8000be6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		diff_bw_min[channel]=0;
 8000bea:	4b46      	ldr	r3, [pc, #280]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		position[MIN][0][channel]=0;
 8000bf8:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	4b42      	ldr	r3, [pc, #264]	; (8000d08 <WaveAnalysis+0x300>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		position[MAX][0][channel]=0;
 8000c06:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <WaveAnalysis+0x300>)
 8000c0c:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8000c10:	330c      	adds	r3, #12
 8000c12:	2000      	movs	r0, #0
 8000c14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

		for(aux=channel;aux<(MAX_NUM_OF_CONVERSIONS*Number_of_Channels);aux+=Number_of_Channels)///Finds the maximum and minimum value for this channel
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c1e:	e031      	b.n	8000c84 <WaveAnalysis+0x27c>
		{
			if(array[aux]<value[MIN][channel])//new minimum value
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <WaveAnalysis+0x304>)
 8000c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c24:	4413      	add	r3, r2
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c30:	5c1b      	ldrb	r3, [r3, r0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d208      	bcs.n	8000c48 <WaveAnalysis+0x240>
			{
				value[MIN][channel]=array[aux];
 8000c36:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <WaveAnalysis+0x304>)
 8000c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c40:	4413      	add	r3, r2
 8000c42:	781a      	ldrb	r2, [r3, #0]
 8000c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c46:	541a      	strb	r2, [r3, r0]
			}
			if(array[aux]>value[MAX][channel])//new maximum value
 8000c48:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <WaveAnalysis+0x304>)
 8000c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c58:	4403      	add	r3, r0
 8000c5a:	440b      	add	r3, r1
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d90a      	bls.n	8000c78 <WaveAnalysis+0x270>
			{
				value[MAX][channel]=array[aux];
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <WaveAnalysis+0x304>)
 8000c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c6c:	4413      	add	r3, r2
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c72:	4403      	add	r3, r0
 8000c74:	440b      	add	r3, r1
 8000c76:	701a      	strb	r2, [r3, #0]
		for(aux=channel;aux<(MAX_NUM_OF_CONVERSIONS*Number_of_Channels);aux+=Number_of_Channels)///Finds the maximum and minimum value for this channel
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <WaveAnalysis+0x2f8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c80:	4413      	add	r3, r2
 8000c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <WaveAnalysis+0x2f8>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbc3      	blt.n	8000c20 <WaveAnalysis+0x218>
			}
		}

		margin[channel] =(int)((value[MAX][channel]-value[MIN][channel])/10);///margin to classify a value as a minimum or maximum = 10% of the signal's amplitude
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca0:	4413      	add	r3, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb0:	5c1b      	ldrb	r3, [r3, r0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <WaveAnalysis+0x308>)
 8000cb6:	fb82 0203 	smull	r0, r2, r2, r3
 8000cba:	1092      	asrs	r2, r2, #2
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	1ad0      	subs	r0, r2, r3
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	b2c0      	uxtb	r0, r0
 8000cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cca:	5498      	strb	r0, [r3, r2]

		if(margin[channel]<=1)///Checks whether the margin is too small
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd4:	5c9b      	ldrb	r3, [r3, r2]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d807      	bhi.n	8000cea <WaveAnalysis+0x2e2>
		{
			period[channel]=0;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <WaveAnalysis+0x30c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8000ce8:	e13d      	b.n	8000f66 <WaveAnalysis+0x55e>
		}else{
			Next_is=MIN;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			cont_max=0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
			cont_min=0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
			 * Verify the position of all minimum and maximum values, alternately and <br>
			 * stores these positions in "position[MAX or MIN][value][channel]". <br>
			 * Verifies the maximum time between two subsequent maximums or minimums. This time will be the period of the signal (worst scenario)
			 */

			for(aux=channel;aux<(MAX_NUM_OF_CONVERSIONS*Number_of_Channels);aux+=Number_of_Channels)
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <WaveAnalysis+0x2fc>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cfe:	e0f6      	b.n	8000eee <WaveAnalysis+0x4e6>
 8000d00:	20000004 	.word	0x20000004
 8000d04:	20007610 	.word	0x20007610
 8000d08:	20007624 	.word	0x20007624
 8000d0c:	200000e0 	.word	0x200000e0
 8000d10:	66666667 	.word	0x66666667
 8000d14:	20007618 	.word	0x20007618
			{
				if((array[aux]>=(value[MAX][channel] - margin[channel]))&&(Next_is==MAX))///New maximum value (with margin)
 8000d18:	4a9d      	ldr	r2, [pc, #628]	; (8000f90 <WaveAnalysis+0x588>)
 8000d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b9c      	ldr	r3, [pc, #624]	; (8000f94 <WaveAnalysis+0x58c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2a:	4403      	add	r3, r0
 8000d2c:	440b      	add	r3, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	4b98      	ldr	r3, [pc, #608]	; (8000f94 <WaveAnalysis+0x58c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461c      	mov	r4, r3
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	5d1b      	ldrb	r3, [r3, r4]
 8000d3c:	1ac3      	subs	r3, r0, r3
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	db65      	blt.n	8000e0e <WaveAnalysis+0x406>
 8000d42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d161      	bne.n	8000e0e <WaveAnalysis+0x406>
				{
					position[MAX][cont_max][channel]=aux;
 8000d4a:	4b92      	ldr	r3, [pc, #584]	; (8000f94 <WaveAnalysis+0x58c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461d      	mov	r5, r3
 8000d50:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d52:	4c91      	ldr	r4, [pc, #580]	; (8000f98 <WaveAnalysis+0x590>)
 8000d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8000d62:	330c      	adds	r3, #12
 8000d64:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
					if(cont_max>=1)///already encountered 2 maximum values?
 8000d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d049      	beq.n	8000e02 <WaveAnalysis+0x3fa>
					{
						if(diff_bw_max[channel]<(position[MAX][cont_max][channel]-position[MAX][cont_max-1][channel]))///always gets the greater difference between two maximum points
 8000d6e:	4b89      	ldr	r3, [pc, #548]	; (8000f94 <WaveAnalysis+0x58c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d7a:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <WaveAnalysis+0x58c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461d      	mov	r5, r3
 8000d80:	4c85      	ldr	r4, [pc, #532]	; (8000f98 <WaveAnalysis+0x590>)
 8000d82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	442b      	add	r3, r5
 8000d8c:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8000d90:	330c      	adds	r3, #12
 8000d92:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8000d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	4b7e      	ldr	r3, [pc, #504]	; (8000f94 <WaveAnalysis+0x58c>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461e      	mov	r6, r3
 8000da0:	4d7d      	ldr	r5, [pc, #500]	; (8000f98 <WaveAnalysis+0x590>)
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	4433      	add	r3, r6
 8000daa:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8000dae:	330c      	adds	r3, #12
 8000db0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000db4:	1ae3      	subs	r3, r4, r3
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d223      	bcs.n	8000e02 <WaveAnalysis+0x3fa>
						{
							diff_bw_max[channel]=position[MAX][cont_max][channel]-position[MAX][cont_max-1][channel];
 8000dba:	4b76      	ldr	r3, [pc, #472]	; (8000f94 <WaveAnalysis+0x58c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461c      	mov	r4, r3
 8000dc0:	4875      	ldr	r0, [pc, #468]	; (8000f98 <WaveAnalysis+0x590>)
 8000dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	4423      	add	r3, r4
 8000dcc:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	4b6e      	ldr	r3, [pc, #440]	; (8000f94 <WaveAnalysis+0x58c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461d      	mov	r5, r3
 8000de0:	4c6d      	ldr	r4, [pc, #436]	; (8000f98 <WaveAnalysis+0x590>)
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	442b      	add	r3, r5
 8000dea:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8000dee:	330c      	adds	r3, #12
 8000df0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000df4:	4a67      	ldr	r2, [pc, #412]	; (8000f94 <WaveAnalysis+0x58c>)
 8000df6:	7812      	ldrb	r2, [r2, #0]
 8000df8:	4614      	mov	r4, r2
 8000dfa:	1ac2      	subs	r2, r0, r3
 8000dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
						}
					}
					Next_is=MIN;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cont_max++;
 8000e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if((array[aux]<=(value[MIN][channel] + margin[channel]))&&(Next_is==MIN))///New minimum value (with margin)
 8000e0e:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <WaveAnalysis+0x588>)
 8000e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e12:	4413      	add	r3, r2
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b5e      	ldr	r3, [pc, #376]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	5c1b      	ldrb	r3, [r3, r0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461c      	mov	r4, r3
 8000e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2c:	5d1b      	ldrb	r3, [r3, r4]
 8000e2e:	4403      	add	r3, r0
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dc56      	bgt.n	8000ee2 <WaveAnalysis+0x4da>
 8000e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d152      	bne.n	8000ee2 <WaveAnalysis+0x4da>
				{
					position[MIN][cont_min][channel]=aux;
 8000e3c:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461d      	mov	r5, r3
 8000e42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000e44:	4c54      	ldr	r4, [pc, #336]	; (8000f98 <WaveAnalysis+0x590>)
 8000e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	442b      	add	r3, r5
 8000e50:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
					if(cont_min>=1)///already encountered 2 minimum values?
 8000e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d03d      	beq.n	8000ed6 <WaveAnalysis+0x4ce>
					{
						if(diff_bw_min[channel]<(position[MIN][cont_min][channel]-position[MIN][cont_min-1][channel]))///always gets the greater difference between two minimum points
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e66:	4b4b      	ldr	r3, [pc, #300]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	4c4a      	ldr	r4, [pc, #296]	; (8000f98 <WaveAnalysis+0x590>)
 8000e6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	442b      	add	r3, r5
 8000e78:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8000e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461e      	mov	r6, r3
 8000e86:	4d44      	ldr	r5, [pc, #272]	; (8000f98 <WaveAnalysis+0x590>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4433      	add	r3, r6
 8000e90:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000e94:	1ae3      	subs	r3, r4, r3
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d21d      	bcs.n	8000ed6 <WaveAnalysis+0x4ce>
						{
							diff_bw_min[channel]=position[MIN][cont_min][channel]-position[MIN][cont_min-1][channel];
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <WaveAnalysis+0x58c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461c      	mov	r4, r3
 8000ea0:	483d      	ldr	r0, [pc, #244]	; (8000f98 <WaveAnalysis+0x590>)
 8000ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4423      	add	r3, r4
 8000eac:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8000eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <WaveAnalysis+0x58c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461d      	mov	r5, r3
 8000eba:	4c37      	ldr	r4, [pc, #220]	; (8000f98 <WaveAnalysis+0x590>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	442b      	add	r3, r5
 8000ec4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000ec8:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <WaveAnalysis+0x58c>)
 8000eca:	7812      	ldrb	r2, [r2, #0]
 8000ecc:	4614      	mov	r4, r2
 8000ece:	1ac2      	subs	r2, r0, r3
 8000ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
						}
					}
					Next_is=MAX;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					cont_min++;
 8000edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ede:	3301      	adds	r3, #1
 8000ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
			for(aux=channel;aux<(MAX_NUM_OF_CONVERSIONS*Number_of_Channels);aux+=Number_of_Channels)
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <WaveAnalysis+0x594>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eea:	4413      	add	r3, r2
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <WaveAnalysis+0x594>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000efe:	429a      	cmp	r2, r3
 8000f00:	f6ff af0a 	blt.w	8000d18 <WaveAnalysis+0x310>
				}
			}

			if(diff_bw_max[channel]>=diff_bw_min[channel])///period will be the greatest difference between two subsequent maximum or minimum points
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f10:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d311      	bcc.n	8000f44 <WaveAnalysis+0x53c>
			{
				period[channel]=diff_bw_max[channel]/Number_of_Channels;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <WaveAnalysis+0x594>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	4614      	mov	r4, r2
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	4610      	mov	r0, r2
 8000f38:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f3c:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <WaveAnalysis+0x598>)
 8000f3e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000f42:	e010      	b.n	8000f66 <WaveAnalysis+0x55e>

			}else
			{
				period[channel]=diff_bw_min[channel]/Number_of_Channels;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <WaveAnalysis+0x594>)
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4614      	mov	r4, r2
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	fbb3 f3f4 	udiv	r3, r3, r4
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <WaveAnalysis+0x598>)
 8000f62:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	for (channel=0;channel<Number_of_Channels;channel++)///course through all channels
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <WaveAnalysis+0x58c>)
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <WaveAnalysis+0x594>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	f4ff ae20 	bcc.w	8000bc0 <WaveAnalysis+0x1b8>
			}
		}

	}

	return HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	46e5      	mov	sp, ip
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3758      	adds	r7, #88	; 0x58
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f8e:	4770      	bx	lr
 8000f90:	200000e0 	.word	0x200000e0
 8000f94:	20007610 	.word	0x20007610
 8000f98:	20007624 	.word	0x20007624
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	20007618 	.word	0x20007618

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fb32 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f832 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff fba6 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb4:	f7ff fb84 	bl	80006c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb8:	f000 fa86 	bl	80014c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fbc:	f7ff faa4 	bl	8000508 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000fc0:	f000 fa10 	bl	80013e4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  ///Request data receiving via serial
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <main+0x60>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <main+0x60>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0220 	orr.w	r2, r2, #32
 8000fd2:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_IT(&huart2, pointer, 1);
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <main+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <main+0x60>)
 8000fde:	f003 f9fe 	bl	80043de <HAL_UART_Receive_IT>

  ///Sets the default sampling rate (500kHz)
  __HAL_TIM_SET_AUTORELOAD(&htim8,SR_Available[5]);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <main+0x68>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	224f      	movs	r2, #79	; 0x4f
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fea:	224f      	movs	r2, #79	; 0x4f
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <main+0x68>)
 8000fee:	60da      	str	r2, [r3, #12]

  __HAL_ADC_ENABLE(&hadc1);
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <main+0x6c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <main+0x6c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	609a      	str	r2, [r3, #8]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001000:	e7fe      	b.n	8001000 <main+0x5c>
 8001002:	bf00      	nop
 8001004:	200160d0 	.word	0x200160d0
 8001008:	20000000 	.word	0x20000000
 800100c:	20016088 	.word	0x20016088
 8001010:	20000030 	.word	0x20000030

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	2234      	movs	r2, #52	; 0x34
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f004 f834 	bl	8005090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <SystemClock_Config+0xd4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <SystemClock_Config+0xd4>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <SystemClock_Config+0xd4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <SystemClock_Config+0xd8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <SystemClock_Config+0xd8>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <SystemClock_Config+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001088:	2310      	movs	r3, #16
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 240;
 800108c:	23f0      	movs	r3, #240	; 0xf0
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001094:	2302      	movs	r3, #2
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fa9f 	bl	80035e4 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010ac:	f000 f912 	bl	80012d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	2103      	movs	r1, #3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 ff3e 	bl	8002f50 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010da:	f000 f8fb 	bl	80012d4 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief ADC's end of conversion interrupt
 * @retval none
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop(&htim8);//Stops the trigger for the ADC (TIM 8)
 80010f8:	480f      	ldr	r0, [pc, #60]	; (8001138 <HAL_ADC_ConvCpltCallback+0x48>)
 80010fa:	f002 fdc9 	bl	8003c90 <HAL_TIM_Base_Stop>
		ADC_conversions=0;//Resets the number of conversions
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_ADC_ConvCpltCallback+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2120      	movs	r1, #32
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <HAL_ADC_ConvCpltCallback+0x50>)
 800110a:	f001 ff07 	bl	8002f1c <HAL_GPIO_WritePin>
		if(WaveAnalysis()==HAL_OK)//Analyzes the waveform obtained
 800110e:	f7ff fc7b 	bl	8000a08 <WaveAnalysis>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConvCpltCallback+0x2c>
		{
			Transmit();//Transmit data
 8001118:	f7ff fbe2 	bl	80008e0 <Transmit>
		}
		__HAL_ADC_CLEAR_FLAG(&hadc1,ADC_FLAG_OVR);//Clear overrun flag (preventively)
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_ADC_ConvCpltCallback+0x54>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f06f 0220 	mvn.w	r2, #32
 8001124:	601a      	str	r2, [r3, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1,ADC_FLAG_EOC);//Clear the end of conversion flag
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_ADC_ConvCpltCallback+0x54>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0202 	mvn.w	r2, #2
 800112e:	601a      	str	r2, [r3, #0]
	//}
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20016088 	.word	0x20016088
 800113c:	20007614 	.word	0x20007614
 8001140:	40020000 	.word	0x40020000
 8001144:	20000030 	.word	0x20000030

08001148 <HAL_UART_RxCpltCallback>:
 * @brief Serial data received interrupt
 * @param huart UART_Handle
 * @retval none
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	///Checks whether the byte received was:

	///Start of conversion (character 'S')
	if(data==START_OF_CONVERSION)
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <HAL_UART_RxCpltCallback+0x154>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b53      	cmp	r3, #83	; 0x53
 8001156:	d124      	bne.n	80011a2 <HAL_UART_RxCpltCallback+0x5a>
	{
		ADC_conversions=0;
 8001158:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_UART_RxCpltCallback+0x158>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
		__HAL_ADC_CLEAR_FLAG(&hadc1,ADC_FLAG_OVR);//clears overrun flag
 800115e:	4b51      	ldr	r3, [pc, #324]	; (80012a4 <HAL_UART_RxCpltCallback+0x15c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f06f 0220 	mvn.w	r2, #32
 8001166:	601a      	str	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&htim8,TIM_FLAG_UPDATE);
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <HAL_UART_RxCpltCallback+0x160>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0201 	mvn.w	r2, #1
 8001170:	611a      	str	r2, [r3, #16]

		HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);//refreshes TIM peripheral
 8001172:	2101      	movs	r1, #1
 8001174:	484c      	ldr	r0, [pc, #304]	; (80012a8 <HAL_UART_RxCpltCallback+0x160>)
 8001176:	f002 fdb2 	bl	8003cde <HAL_TIM_GenerateEvent>

		HAL_ADC_Start_DMA(&hadc1, &array[0], MAX_NUM_OF_CONVERSIONS*Number_of_Channels);
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <HAL_UART_RxCpltCallback+0x164>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	f242 7310 	movw	r3, #10000	; 0x2710
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4949      	ldr	r1, [pc, #292]	; (80012b0 <HAL_UART_RxCpltCallback+0x168>)
 800118c:	4845      	ldr	r0, [pc, #276]	; (80012a4 <HAL_UART_RxCpltCallback+0x15c>)
 800118e:	f000 fc35 	bl	80019fc <HAL_ADC_Start_DMA>
		HAL_TIM_Base_Start(&htim8);
 8001192:	4845      	ldr	r0, [pc, #276]	; (80012a8 <HAL_UART_RxCpltCallback+0x160>)
 8001194:	f002 fd14 	bl	8003bc0 <HAL_TIM_Base_Start>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	2120      	movs	r1, #32
 800119c:	4845      	ldr	r0, [pc, #276]	; (80012b4 <HAL_UART_RxCpltCallback+0x16c>)
 800119e:	f001 febd 	bl	8002f1c <HAL_GPIO_WritePin>
	}

	if(Config>=2)///Some of the 2 byte of the number of samples
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d91b      	bls.n	80011e2 <HAL_UART_RxCpltCallback+0x9a>
	{
		Number_of_Samples|= (data<<((Config-2)*8));
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_UART_RxCpltCallback+0x154>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	3b02      	subs	r3, #2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_UART_RxCpltCallback+0x174>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	4a3d      	ldr	r2, [pc, #244]	; (80012bc <HAL_UART_RxCpltCallback+0x174>)
 80011c6:	6013      	str	r3, [r2, #0]
		Config++;
 80011c8:	4b3b      	ldr	r3, [pc, #236]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011d2:	701a      	strb	r2, [r3, #0]
		if(Config==4)
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d102      	bne.n	80011e2 <HAL_UART_RxCpltCallback+0x9a>
		{
			Config=FALSE;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		}
	}
	if(Config==TRUE)///Configuration byte
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d146      	bne.n	8001278 <HAL_UART_RxCpltCallback+0x130>
	{
		Config=0;
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
		Config|=(data & 0xF);//sample rate is the first 4 bits of data
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <HAL_UART_RxCpltCallback+0x154>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	b25a      	sxtb	r2, r3
 80011fc:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b25b      	sxtb	r3, r3
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 800120a:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim8,SR_Available[(int)Config]);//sets sample rate
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <HAL_UART_RxCpltCallback+0x160>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a2a      	ldr	r2, [pc, #168]	; (80012c0 <HAL_UART_RxCpltCallback+0x178>)
 8001218:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800121c:	62da      	str	r2, [r3, #44]	; 0x2c
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_UART_RxCpltCallback+0x178>)
 8001226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122a:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_UART_RxCpltCallback+0x160>)
 800122c:	60d3      	str	r3, [r2, #12]

		Number_of_Channels=((data>>4)&(0x7));
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_UART_RxCpltCallback+0x154>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_RxCpltCallback+0x164>)
 800123e:	701a      	strb	r2, [r3, #0]
		ADC1->SQR1&=~ADC_SQR1_L;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_UART_RxCpltCallback+0x17c>)
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_UART_RxCpltCallback+0x17c>)
 8001246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800124a:	62d3      	str	r3, [r2, #44]	; 0x2c
		ADC1->SQR1|=((Number_of_Channels-1)<<20);//sets the number of channels per conversion
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_UART_RxCpltCallback+0x17c>)
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	4a16      	ldr	r2, [pc, #88]	; (80012ac <HAL_UART_RxCpltCallback+0x164>)
 8001252:	7812      	ldrb	r2, [r2, #0]
 8001254:	3a01      	subs	r2, #1
 8001256:	0512      	lsls	r2, r2, #20
 8001258:	4611      	mov	r1, r2
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_UART_RxCpltCallback+0x17c>)
 800125c:	430b      	orrs	r3, r1
 800125e:	62d3      	str	r3, [r2, #44]	; 0x2c

		N_Samples_is_Set = (data>>7);
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_UART_RxCpltCallback+0x154>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	09db      	lsrs	r3, r3, #7
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_UART_RxCpltCallback+0x180>)
 800126a:	701a      	strb	r2, [r3, #0]
		Number_of_Samples=0;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_RxCpltCallback+0x174>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

		Config=2;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 8001274:	2202      	movs	r2, #2
 8001276:	701a      	strb	r2, [r3, #0]
	}
	if(data==DEFINE_CONFIG)///Define the configuration (character 'C')
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_UART_RxCpltCallback+0x154>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b43      	cmp	r3, #67	; 0x43
 800127e:	d102      	bne.n	8001286 <HAL_UART_RxCpltCallback+0x13e>
	{
		Config=TRUE;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_UART_RxCpltCallback+0x170>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, pointer, 1);
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_UART_RxCpltCallback+0x184>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <HAL_UART_RxCpltCallback+0x188>)
 8001290:	f003 f8a5 	bl	80043de <HAL_UART_Receive_IT>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	20007614 	.word	0x20007614
 80012a4:	20000030 	.word	0x20000030
 80012a8:	20016088 	.word	0x20016088
 80012ac:	20000004 	.word	0x20000004
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	40020000 	.word	0x40020000
 80012b8:	200000d9 	.word	0x200000d9
 80012bc:	200000dc 	.word	0x200000dc
 80012c0:	080050b8 	.word	0x080050b8
 80012c4:	40012000 	.word	0x40012000
 80012c8:	200000da 	.word	0x200000da
 80012cc:	20000000 	.word	0x20000000
 80012d0:	200160d0 	.word	0x200160d0

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800131e:	2007      	movs	r0, #7
 8001320:	f001 f824 	bl	800236c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 f99a 	bl	80016b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <ADC_IRQHandler+0x10>)
 800138a:	f000 f9f6 	bl	800177a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000030 	.word	0x20000030

08001398 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART2_IRQHandler+0x10>)
 800139e:	f003 f84f 	bl	8004440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200160d0 	.word	0x200160d0

080013ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <DMA2_Stream0_IRQHandler+0x10>)
 80013b2:	f001 f9b5 	bl	8002720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000078 	.word	0x20000078

080013c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM8_Init+0x98>)
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <MX_TIM8_Init+0x9c>)
 8001404:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM8_Init+0x98>)
 8001408:	2202      	movs	r2, #2
 800140a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM8_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 599;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_TIM8_Init+0x98>)
 8001414:	f240 2257 	movw	r2, #599	; 0x257
 8001418:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_TIM8_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_TIM8_Init+0x98>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_TIM8_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_TIM8_Init+0x98>)
 800142e:	f002 fb77 	bl	8003b20 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001438:	f7ff ff4c 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4619      	mov	r1, r3
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <MX_TIM8_Init+0x98>)
 800144a:	f002 fc6f 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001454:	f7ff ff3e 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001458:	2320      	movs	r3, #32
 800145a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_TIM8_Init+0x98>)
 8001466:	f002 fe5f 	bl	8004128 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001470:	f7ff ff30 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20016088 	.word	0x20016088
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0x40>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_TIM_Base_MspInit+0x40>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_TIM_Base_MspInit+0x40>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40010400 	.word	0x40010400
 80014c4:	40023800 	.word	0x40023800

080014c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART2_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 8001500:	f002 fe8e 	bl	8004220 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f7ff fee3 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200160d0 	.word	0x200160d0
 8001518:	40004400 	.word	0x40004400

0800151c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <HAL_UART_MspInit+0x94>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d133      	bne.n	80015a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_UART_MspInit+0x98>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_UART_MspInit+0x98>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001576:	230c      	movs	r3, #12
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001592:	f001 fb2f 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 8001596:	2202      	movs	r2, #2
 8001598:	2100      	movs	r1, #0
 800159a:	2026      	movs	r0, #38	; 0x26
 800159c:	f000 fef1 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a0:	2026      	movs	r0, #38	; 0x26
 80015a2:	f000 ff0a 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40004400 	.word	0x40004400
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d8:	4c0b      	ldr	r4, [pc, #44]	; (8001608 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015e6:	f7ff feeb 	bl	80013c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ea:	f003 fd2d 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ee:	f7ff fcd9 	bl	8000fa4 <main>
  bx  lr    
 80015f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001600:	08005108 	.word	0x08005108
  ldr r2, =_sbss
 8001604:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001608:	20016118 	.word	0x20016118

0800160c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800160c:	e7fe      	b.n	800160c <CAN1_RX0_IRQHandler>
	...

08001610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_Init+0x40>)
 800161a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_Init+0x40>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_Init+0x40>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001638:	2003      	movs	r0, #3
 800163a:	f000 fe97 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f808 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001644:	f7ff fe4c 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x54>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x58>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 feaf 	bl	80023d6 <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00e      	b.n	80016a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b0f      	cmp	r3, #15
 8001686:	d80a      	bhi.n	800169e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001688:	2200      	movs	r2, #0
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	f000 fe77 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001694:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <HAL_InitTick+0x5c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000010 	.word	0x20000010
 80016b0:	2000000c 	.word	0x2000000c

080016b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x20>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x24>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_IncTick+0x24>)
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000010 	.word	0x20000010
 80016d8:	20016114 	.word	0x20016114

080016dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_GetTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20016114 	.word	0x20016114

080016f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e033      	b.n	8001772 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe ff58 	bl	80005c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800173a:	f023 0302 	bic.w	r3, r3, #2
 800173e:	f043 0202 	orr.w	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fbb8 	bl	8001ebc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f023 0303 	bic.w	r3, r3, #3
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
 8001762:	e001      	b.n	8001768 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d049      	beq.n	8001850 <HAL_ADC_IRQHandler+0xd6>
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d046      	beq.n	8001850 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d12b      	bne.n	8001840 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d127      	bne.n	8001840 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d119      	bne.n	8001840 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0220 	bic.w	r2, r2, #32
 800181a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fc55 	bl	80010f0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f06f 0212 	mvn.w	r2, #18
 800184e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d057      	beq.n	8001932 <HAL_ADC_IRQHandler+0x1b8>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d054      	beq.n	8001932 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d139      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d12b      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d124      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11d      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018fc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fc48 	bl	80021b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 020c 	mvn.w	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	2b40      	cmp	r3, #64	; 0x40
 8001954:	bf0c      	ite	eq
 8001956:	2301      	moveq	r3, #1
 8001958:	2300      	movne	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d017      	beq.n	8001994 <HAL_ADC_IRQHandler+0x21a>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d014      	beq.n	8001994 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10d      	bne.n	8001994 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f953 	bl	8001c30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f06f 0201 	mvn.w	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b20      	cmp	r3, #32
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d015      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x27a>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d012      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f06f 0220 	mvn.w	r2, #32
 80019e2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f92d 	bl	8001c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f06f 0220 	mvn.w	r2, #32
 80019f2:	601a      	str	r2, [r3, #0]
  }
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_Start_DMA+0x1e>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e0e9      	b.n	8001bee <HAL_ADC_Start_DMA+0x1f2>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d018      	beq.n	8001a62 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a40:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_ADC_Start_DMA+0x1fc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a6d      	ldr	r2, [pc, #436]	; (8001bfc <HAL_ADC_Start_DMA+0x200>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9a      	lsrs	r2, r3, #18
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a54:	e002      	b.n	8001a5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a70:	d107      	bne.n	8001a82 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	f040 80a1 	bne.w	8001bd4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001abc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad0:	d106      	bne.n	8001ae0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f023 0206 	bic.w	r2, r3, #6
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ade:	e002      	b.n	8001ae6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <HAL_ADC_Start_DMA+0x204>)
 8001af0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af6:	4a43      	ldr	r2, [pc, #268]	; (8001c04 <HAL_ADC_Start_DMA+0x208>)
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afe:	4a42      	ldr	r2, [pc, #264]	; (8001c08 <HAL_ADC_Start_DMA+0x20c>)
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	4a41      	ldr	r2, [pc, #260]	; (8001c0c <HAL_ADC_Start_DMA+0x210>)
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	334c      	adds	r3, #76	; 0x4c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f000 fd02 	bl	800254c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d12a      	bne.n	8001baa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2d      	ldr	r2, [pc, #180]	; (8001c10 <HAL_ADC_Start_DMA+0x214>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d015      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x18e>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a2c      	ldr	r2, [pc, #176]	; (8001c14 <HAL_ADC_Start_DMA+0x218>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_Start_DMA+0x178>
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_ADC_Start_DMA+0x204>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00a      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_ADC_Start_DMA+0x21c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d136      	bne.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_ADC_Start_DMA+0x204>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d130      	bne.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d129      	bne.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e020      	b.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_ADC_Start_DMA+0x214>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d11b      	bne.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	e00b      	b.n	8001bec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f043 0210 	orr.w	r2, r3, #16
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	40012300 	.word	0x40012300
 8001c04:	080020b5 	.word	0x080020b5
 8001c08:	0800216f 	.word	0x0800216f
 8001c0c:	0800218b 	.word	0x0800218b
 8001c10:	40012000 	.word	0x40012000
 8001c14:	40012100 	.word	0x40012100
 8001c18:	40012200 	.word	0x40012200

08001c1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x1c>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e113      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x244>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b09      	cmp	r3, #9
 8001c82:	d925      	bls.n	8001cd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68d9      	ldr	r1, [r3, #12]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	3b1e      	subs	r3, #30
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68d9      	ldr	r1, [r3, #12]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4403      	add	r3, r0
 8001cc2:	3b1e      	subs	r3, #30
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	e022      	b.n	8001d16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4613      	mov	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6919      	ldr	r1, [r3, #16]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4403      	add	r3, r0
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d824      	bhi.n	8001d68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b05      	subs	r3, #5
 8001d30:	221f      	movs	r2, #31
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3b05      	subs	r3, #5
 8001d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
 8001d66:	e04c      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d824      	bhi.n	8001dba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b23      	subs	r3, #35	; 0x23
 8001d82:	221f      	movs	r2, #31
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43da      	mvns	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	400a      	ands	r2, r1
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3b23      	subs	r3, #35	; 0x23
 8001dac:	fa00 f203 	lsl.w	r2, r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
 8001db8:	e023      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b41      	subs	r3, #65	; 0x41
 8001dcc:	221f      	movs	r2, #31
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b41      	subs	r3, #65	; 0x41
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_ADC_ConfigChannel+0x250>)
 8001e04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_ADC_ConfigChannel+0x254>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d10f      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1d8>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b12      	cmp	r3, #18
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_ADC_ConfigChannel+0x254>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12b      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x23a>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_ADC_ConfigChannel+0x258>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0x1f4>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b11      	cmp	r3, #17
 8001e4a:	d122      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <HAL_ADC_ConfigChannel+0x258>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d111      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_ADC_ConfigChannel+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_ADC_ConfigChannel+0x260>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9a      	lsrs	r2, r3, #18
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40012300 	.word	0x40012300
 8001eac:	40012000 	.word	0x40012000
 8001eb0:	10000012 	.word	0x10000012
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	431bde83 	.word	0x431bde83

08001ebc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec4:	4b79      	ldr	r3, [pc, #484]	; (80020ac <ADC_Init+0x1f0>)
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	021a      	lsls	r2, r3, #8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6899      	ldr	r1, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	4a58      	ldr	r2, [pc, #352]	; (80020b0 <ADC_Init+0x1f4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d022      	beq.n	8001f9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6899      	ldr	r1, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	e00f      	b.n	8001fba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0202 	bic.w	r2, r2, #2
 8001fc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e1b      	ldrb	r3, [r3, #24]
 8001fd4:	005a      	lsls	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002006:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6859      	ldr	r1, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	3b01      	subs	r3, #1
 8002014:	035a      	lsls	r2, r3, #13
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	e007      	b.n	8002030 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	3b01      	subs	r3, #1
 800204c:	051a      	lsls	r2, r3, #20
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002072:	025a      	lsls	r2, r3, #9
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	029a      	lsls	r2, r3, #10
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40012300 	.word	0x40012300
 80020b0:	0f000001 	.word	0x0f000001

080020b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d13c      	bne.n	8002148 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d12b      	bne.n	8002140 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d127      	bne.n	8002140 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002108:	2b00      	cmp	r3, #0
 800210a:	d119      	bne.n	8002140 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0220 	bic.w	r2, r2, #32
 800211a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7fe ffd5 	bl	80010f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002146:	e00e      	b.n	8002166 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fd75 	bl	8001c44 <HAL_ADC_ErrorCallback>
}
 800215a:	e004      	b.n	8002166 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fd4d 	bl	8001c1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f043 0204 	orr.w	r2, r3, #4
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff fd4a 	bl	8001c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff3e 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff31 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa2 	bl	8002328 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff f96e 	bl	80016dc <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e099      	b.n	8002540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242c:	e00f      	b.n	800244e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800242e:	f7ff f955 	bl	80016dc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b05      	cmp	r3, #5
 800243a:	d908      	bls.n	800244e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e078      	b.n	8002540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e8      	bne.n	800242e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_DMA_Init+0x158>)
 8002468:	4013      	ands	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d117      	bne.n	8002512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb01 	bl	8002afc <DMA_CheckFifoParam>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800250e:	2301      	movs	r3, #1
 8002510:	e016      	b.n	8002540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fab8 	bl	8002a90 <DMA_CalcBaseAndBitshift>
 8002520:	4603      	mov	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	223f      	movs	r2, #63	; 0x3f
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	f010803f 	.word	0xf010803f

0800254c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Start_IT+0x26>
 800256e:	2302      	movs	r3, #2
 8002570:	e040      	b.n	80025f4 <HAL_DMA_Start_IT+0xa8>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d12f      	bne.n	80025e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fa4a 	bl	8002a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	223f      	movs	r2, #63	; 0x3f
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0216 	orr.w	r2, r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800260a:	f7ff f867 	bl	80016dc <HAL_GetTick>
 800260e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e052      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800264c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_Abort+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	e013      	b.n	80026a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002680:	f7ff f82c 	bl	80016dc <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d90c      	bls.n	80026a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2203      	movs	r2, #3
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e015      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e4      	bne.n	8002680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	223f      	movs	r2, #63	; 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d004      	beq.n	80026fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00c      	b.n	8002714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2205      	movs	r2, #5
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800272c:	4b8e      	ldr	r3, [pc, #568]	; (8002968 <HAL_DMA_IRQHandler+0x248>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a8e      	ldr	r2, [pc, #568]	; (800296c <HAL_DMA_IRQHandler+0x24c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2208      	movs	r2, #8
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01a      	beq.n	800278c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2208      	movs	r2, #8
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2201      	movs	r2, #1
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f043 0202 	orr.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2204      	movs	r2, #4
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2204      	movs	r2, #4
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2210      	movs	r2, #16
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d043      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03c      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2210      	movs	r2, #16
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d018      	beq.n	8002862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d024      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	e01f      	b.n	8002890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e016      	b.n	8002890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2220      	movs	r2, #32
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 808f 	beq.w	80029c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8087 	beq.w	80029c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2220      	movs	r2, #32
 80028b8:	409a      	lsls	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d136      	bne.n	8002938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0216 	bic.w	r2, r2, #22
 80028d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_DMA_IRQHandler+0x1da>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0208 	bic.w	r2, r2, #8
 8002908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	223f      	movs	r2, #63	; 0x3f
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d07e      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
        }
        return;
 8002936:	e079      	b.n	8002a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01d      	beq.n	8002982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	2b00      	cmp	r3, #0
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
 8002964:	e02c      	b.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
 8002966:	bf00      	nop
 8002968:	20000008 	.word	0x20000008
 800296c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e01e      	b.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10f      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0210 	bic.w	r2, r2, #16
 800299e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d032      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2205      	movs	r2, #5
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d307      	bcc.n	8002a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f2      	bne.n	80029ec <HAL_DMA_IRQHandler+0x2cc>
 8002a06:	e000      	b.n	8002a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a08:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
 8002a2a:	e000      	b.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a2c:	bf00      	nop
    }
  }
}
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d108      	bne.n	8002a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a72:	e007      	b.n	8002a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3b10      	subs	r3, #16
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <DMA_CalcBaseAndBitshift+0x64>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <DMA_CalcBaseAndBitshift+0x68>)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d909      	bls.n	8002ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	1d1a      	adds	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad0:	e007      	b.n	8002ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	aaaaaaab 	.word	0xaaaaaaab
 8002af8:	080050f0 	.word	0x080050f0

08002afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11f      	bne.n	8002b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d856      	bhi.n	8002bca <DMA_CheckFifoParam+0xce>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <DMA_CheckFifoParam+0x28>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b47 	.word	0x08002b47
 8002b2c:	08002b35 	.word	0x08002b35
 8002b30:	08002bcb 	.word	0x08002bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d046      	beq.n	8002bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b44:	e043      	b.n	8002bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b4e:	d140      	bne.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b54:	e03d      	b.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5e:	d121      	bne.n	8002ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d837      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xda>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <DMA_CheckFifoParam+0x70>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b83 	.word	0x08002b83
 8002b74:	08002b7d 	.word	0x08002b7d
 8002b78:	08002b95 	.word	0x08002b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e030      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d025      	beq.n	8002bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b92:	e022      	b.n	8002bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9c:	d11f      	bne.n	8002bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ba2:	e01c      	b.n	8002bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d903      	bls.n	8002bb2 <DMA_CheckFifoParam+0xb6>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d003      	beq.n	8002bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb0:	e018      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb6:	e015      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e00b      	b.n	8002be2 <DMA_CheckFifoParam+0xe6>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e00a      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e008      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e006      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
    }
  } 
  
  return status; 
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e165      	b.n	8002edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 8154 	bne.w	8002ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d005      	beq.n	8002c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d130      	bne.n	8002ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80ae 	beq.w	8002ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_GPIO_Init+0x300>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_GPIO_Init+0x300>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_GPIO_Init+0x300>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d96:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_GPIO_Init+0x304>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x308>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d025      	beq.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01f      	beq.n	8002e0a <HAL_GPIO_Init+0x216>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x310>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_Init+0x212>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x314>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0x20e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	; (8002f0c <HAL_GPIO_Init+0x318>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_Init+0x20a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x31c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_Init+0x206>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a49      	ldr	r2, [pc, #292]	; (8002f14 <HAL_GPIO_Init+0x320>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_Init+0x202>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e00c      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e00a      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	e008      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e004      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f002 0203 	and.w	r2, r2, #3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4093      	lsls	r3, r2
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e20:	4935      	ldr	r1, [pc, #212]	; (8002ef8 <HAL_GPIO_Init+0x304>)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e52:	4a31      	ldr	r2, [pc, #196]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	f67f ae96 	bls.w	8002c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40021800 	.word	0x40021800
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f38:	e003      	b.n	8002f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0cc      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d90c      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d119      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d003      	beq.n	800300e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e067      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4934      	ldr	r1, [pc, #208]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7fe fb4c 	bl	80016dc <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7fe fb48 	bl	80016dc <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e04f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d20c      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f855 	bl	8003184 <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe faac 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40023c00 	.word	0x40023c00
 800310c:	40023800 	.word	0x40023800
 8003110:	080050d8 	.word	0x080050d8
 8003114:	20000008 	.word	0x20000008
 8003118:	2000000c 	.word	0x2000000c

0800311c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <HAL_RCC_GetHCLKFreq+0x14>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000008 	.word	0x20000008

08003134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003138:	f7ff fff0 	bl	800311c <HAL_RCC_GetHCLKFreq>
 800313c:	4602      	mov	r2, r0
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	4903      	ldr	r1, [pc, #12]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800314a:	5ccb      	ldrb	r3, [r1, r3]
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40023800 	.word	0x40023800
 8003158:	080050e8 	.word	0x080050e8

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003160:	f7ff ffdc 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	0b5b      	lsrs	r3, r3, #13
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4903      	ldr	r1, [pc, #12]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40023800 	.word	0x40023800
 8003180:	080050e8 	.word	0x080050e8

08003184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b0ae      	sub	sp, #184	; 0xb8
 800318a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031aa:	4bcb      	ldr	r3, [pc, #812]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	f200 8206 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x440>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031f5 	.word	0x080031f5
 80031c4:	080035c5 	.word	0x080035c5
 80031c8:	080035c5 	.word	0x080035c5
 80031cc:	080035c5 	.word	0x080035c5
 80031d0:	080031fd 	.word	0x080031fd
 80031d4:	080035c5 	.word	0x080035c5
 80031d8:	080035c5 	.word	0x080035c5
 80031dc:	080035c5 	.word	0x080035c5
 80031e0:	08003205 	.word	0x08003205
 80031e4:	080035c5 	.word	0x080035c5
 80031e8:	080035c5 	.word	0x080035c5
 80031ec:	080035c5 	.word	0x080035c5
 80031f0:	080033f5 	.word	0x080033f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f4:	4bb9      	ldr	r3, [pc, #740]	; (80034dc <HAL_RCC_GetSysClockFreq+0x358>)
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80031fa:	e1e7      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031fc:	4bb8      	ldr	r3, [pc, #736]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80031fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003202:	e1e3      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003204:	4bb4      	ldr	r3, [pc, #720]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800320c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003210:	4bb1      	ldr	r3, [pc, #708]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d071      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321c:	4bae      	ldr	r3, [pc, #696]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003228:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800322c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800323e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003242:	4622      	mov	r2, r4
 8003244:	462b      	mov	r3, r5
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	0159      	lsls	r1, r3, #5
 8003250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003254:	0150      	lsls	r0, r2, #5
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4621      	mov	r1, r4
 800325c:	1a51      	subs	r1, r2, r1
 800325e:	6439      	str	r1, [r7, #64]	; 0x40
 8003260:	4629      	mov	r1, r5
 8003262:	eb63 0301 	sbc.w	r3, r3, r1
 8003266:	647b      	str	r3, [r7, #68]	; 0x44
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003274:	4649      	mov	r1, r9
 8003276:	018b      	lsls	r3, r1, #6
 8003278:	4641      	mov	r1, r8
 800327a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327e:	4641      	mov	r1, r8
 8003280:	018a      	lsls	r2, r1, #6
 8003282:	4641      	mov	r1, r8
 8003284:	1a51      	subs	r1, r2, r1
 8003286:	63b9      	str	r1, [r7, #56]	; 0x38
 8003288:	4649      	mov	r1, r9
 800328a:	eb63 0301 	sbc.w	r3, r3, r1
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800329c:	4649      	mov	r1, r9
 800329e:	00cb      	lsls	r3, r1, #3
 80032a0:	4641      	mov	r1, r8
 80032a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a6:	4641      	mov	r1, r8
 80032a8:	00ca      	lsls	r2, r1, #3
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	4622      	mov	r2, r4
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	633b      	str	r3, [r7, #48]	; 0x30
 80032b6:	462b      	mov	r3, r5
 80032b8:	460a      	mov	r2, r1
 80032ba:	eb42 0303 	adc.w	r3, r2, r3
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032cc:	4629      	mov	r1, r5
 80032ce:	024b      	lsls	r3, r1, #9
 80032d0:	4621      	mov	r1, r4
 80032d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032d6:	4621      	mov	r1, r4
 80032d8:	024a      	lsls	r2, r1, #9
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80032f0:	f7fc ff88 	bl	8000204 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4613      	mov	r3, r2
 80032fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032fe:	e067      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003300:	4b75      	ldr	r3, [pc, #468]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800330c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003318:	67bb      	str	r3, [r7, #120]	; 0x78
 800331a:	2300      	movs	r3, #0
 800331c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800331e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	f04f 0000 	mov.w	r0, #0
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	0159      	lsls	r1, r3, #5
 8003330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003334:	0150      	lsls	r0, r2, #5
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4621      	mov	r1, r4
 800333c:	1a51      	subs	r1, r2, r1
 800333e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003340:	4629      	mov	r1, r5
 8003342:	eb63 0301 	sbc.w	r3, r3, r1
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003354:	4649      	mov	r1, r9
 8003356:	018b      	lsls	r3, r1, #6
 8003358:	4641      	mov	r1, r8
 800335a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800335e:	4641      	mov	r1, r8
 8003360:	018a      	lsls	r2, r1, #6
 8003362:	4641      	mov	r1, r8
 8003364:	ebb2 0a01 	subs.w	sl, r2, r1
 8003368:	4649      	mov	r1, r9
 800336a:	eb63 0b01 	sbc.w	fp, r3, r1
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800337a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800337e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003382:	4692      	mov	sl, r2
 8003384:	469b      	mov	fp, r3
 8003386:	4623      	mov	r3, r4
 8003388:	eb1a 0303 	adds.w	r3, sl, r3
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	462b      	mov	r3, r5
 8003390:	eb4b 0303 	adc.w	r3, fp, r3
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033a2:	4629      	mov	r1, r5
 80033a4:	028b      	lsls	r3, r1, #10
 80033a6:	4621      	mov	r1, r4
 80033a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033ac:	4621      	mov	r1, r4
 80033ae:	028a      	lsls	r2, r1, #10
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b8:	2200      	movs	r2, #0
 80033ba:	673b      	str	r3, [r7, #112]	; 0x70
 80033bc:	677a      	str	r2, [r7, #116]	; 0x74
 80033be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033c2:	f7fc ff1f 	bl	8000204 <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4613      	mov	r3, r2
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80033e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033f2:	e0eb      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f4:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003400:	4b35      	ldr	r3, [pc, #212]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d06b      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	2200      	movs	r2, #0
 8003414:	66bb      	str	r3, [r7, #104]	; 0x68
 8003416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341e:	663b      	str	r3, [r7, #96]	; 0x60
 8003420:	2300      	movs	r3, #0
 8003422:	667b      	str	r3, [r7, #100]	; 0x64
 8003424:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003428:	4622      	mov	r2, r4
 800342a:	462b      	mov	r3, r5
 800342c:	f04f 0000 	mov.w	r0, #0
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	0159      	lsls	r1, r3, #5
 8003436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343a:	0150      	lsls	r0, r2, #5
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4621      	mov	r1, r4
 8003442:	1a51      	subs	r1, r2, r1
 8003444:	61b9      	str	r1, [r7, #24]
 8003446:	4629      	mov	r1, r5
 8003448:	eb63 0301 	sbc.w	r3, r3, r1
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800345a:	4659      	mov	r1, fp
 800345c:	018b      	lsls	r3, r1, #6
 800345e:	4651      	mov	r1, sl
 8003460:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003464:	4651      	mov	r1, sl
 8003466:	018a      	lsls	r2, r1, #6
 8003468:	4651      	mov	r1, sl
 800346a:	ebb2 0801 	subs.w	r8, r2, r1
 800346e:	4659      	mov	r1, fp
 8003470:	eb63 0901 	sbc.w	r9, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003480:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003484:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003488:	4690      	mov	r8, r2
 800348a:	4699      	mov	r9, r3
 800348c:	4623      	mov	r3, r4
 800348e:	eb18 0303 	adds.w	r3, r8, r3
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	462b      	mov	r3, r5
 8003496:	eb49 0303 	adc.w	r3, r9, r3
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034a8:	4629      	mov	r1, r5
 80034aa:	024b      	lsls	r3, r1, #9
 80034ac:	4621      	mov	r1, r4
 80034ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034b2:	4621      	mov	r1, r4
 80034b4:	024a      	lsls	r2, r1, #9
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034be:	2200      	movs	r2, #0
 80034c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80034c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80034c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034c8:	f7fc fe9c 	bl	8000204 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034d6:	e065      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x420>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e4:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCC_GetSysClockFreq+0x458>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	2200      	movs	r2, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	4611      	mov	r1, r2
 80034f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f4:	653b      	str	r3, [r7, #80]	; 0x50
 80034f6:	2300      	movs	r3, #0
 80034f8:	657b      	str	r3, [r7, #84]	; 0x54
 80034fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80034fe:	4642      	mov	r2, r8
 8003500:	464b      	mov	r3, r9
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	0159      	lsls	r1, r3, #5
 800350c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003510:	0150      	lsls	r0, r2, #5
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4641      	mov	r1, r8
 8003518:	1a51      	subs	r1, r2, r1
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	4649      	mov	r1, r9
 800351e:	eb63 0301 	sbc.w	r3, r3, r1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003530:	4659      	mov	r1, fp
 8003532:	018b      	lsls	r3, r1, #6
 8003534:	4651      	mov	r1, sl
 8003536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800353a:	4651      	mov	r1, sl
 800353c:	018a      	lsls	r2, r1, #6
 800353e:	4651      	mov	r1, sl
 8003540:	1a54      	subs	r4, r2, r1
 8003542:	4659      	mov	r1, fp
 8003544:	eb63 0501 	sbc.w	r5, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	00eb      	lsls	r3, r5, #3
 8003552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003556:	00e2      	lsls	r2, r4, #3
 8003558:	4614      	mov	r4, r2
 800355a:	461d      	mov	r5, r3
 800355c:	4643      	mov	r3, r8
 800355e:	18e3      	adds	r3, r4, r3
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	464b      	mov	r3, r9
 8003564:	eb45 0303 	adc.w	r3, r5, r3
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003576:	4629      	mov	r1, r5
 8003578:	028b      	lsls	r3, r1, #10
 800357a:	4621      	mov	r1, r4
 800357c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003580:	4621      	mov	r1, r4
 8003582:	028a      	lsls	r2, r1, #10
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800358c:	2200      	movs	r2, #0
 800358e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003590:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003592:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003596:	f7fc fe35 	bl	8000204 <__aeabi_uldivmod>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4613      	mov	r3, r2
 80035a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035a4:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <HAL_RCC_GetSysClockFreq+0x458>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0f1b      	lsrs	r3, r3, #28
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80035b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035c2:	e003      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	37b8      	adds	r7, #184	; 0xb8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	00f42400 	.word	0x00f42400

080035e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e28d      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8083 	beq.w	800370a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003604:	4b94      	ldr	r3, [pc, #592]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b04      	cmp	r3, #4
 800360e:	d019      	beq.n	8003644 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003610:	4b91      	ldr	r3, [pc, #580]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003618:	2b08      	cmp	r3, #8
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800361c:	4b8e      	ldr	r3, [pc, #568]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003628:	d00c      	beq.n	8003644 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362a:	4b8b      	ldr	r3, [pc, #556]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d112      	bne.n	800365c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003636:	4b88      	ldr	r3, [pc, #544]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003642:	d10b      	bne.n	800365c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	4b84      	ldr	r3, [pc, #528]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d05b      	beq.n	8003708 <HAL_RCC_OscConfig+0x124>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d157      	bne.n	8003708 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e25a      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d106      	bne.n	8003674 <HAL_RCC_OscConfig+0x90>
 8003666:	4b7c      	ldr	r3, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7b      	ldr	r2, [pc, #492]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e01d      	b.n	80036b0 <HAL_RCC_OscConfig+0xcc>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0xb4>
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a75      	ldr	r2, [pc, #468]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a72      	ldr	r2, [pc, #456]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0xcc>
 8003698:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800369e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6b      	ldr	r2, [pc, #428]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80036aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe f810 	bl	80016dc <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fe f80c 	bl	80016dc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e21f      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b61      	ldr	r3, [pc, #388]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0xdc>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd fffc 	bl	80016dc <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fd fff8 	bl	80016dc <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e20b      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	4b57      	ldr	r3, [pc, #348]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x104>
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d06f      	beq.n	80037f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003716:	4b50      	ldr	r3, [pc, #320]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b00      	cmp	r3, #0
 8003720:	d017      	beq.n	8003752 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003722:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800372a:	2b08      	cmp	r3, #8
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373a:	4b47      	ldr	r3, [pc, #284]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d11c      	bne.n	8003780 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_RCC_OscConfig+0x186>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e1d3      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4937      	ldr	r1, [pc, #220]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	e03a      	b.n	80037f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x278>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fd ffa5 	bl	80016dc <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003796:	f7fd ffa1 	bl	80016dc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1b4      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a8:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4925      	ldr	r1, [pc, #148]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
 80037c8:	e015      	b.n	80037f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_OscConfig+0x278>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fd ff84 	bl	80016dc <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d8:	f7fd ff80 	bl	80016dc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e193      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d036      	beq.n	8003870 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_RCC_OscConfig+0x27c>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fd ff64 	bl	80016dc <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003818:	f7fd ff60 	bl	80016dc <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e173      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_RCC_OscConfig+0x274>)
 800382c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x234>
 8003836:	e01b      	b.n	8003870 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_OscConfig+0x27c>)
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383e:	f7fd ff4d 	bl	80016dc <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003844:	e00e      	b.n	8003864 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003846:	f7fd ff49 	bl	80016dc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d907      	bls.n	8003864 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e15c      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
 8003858:	40023800 	.word	0x40023800
 800385c:	42470000 	.word	0x42470000
 8003860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003864:	4b8a      	ldr	r3, [pc, #552]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ea      	bne.n	8003846 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8097 	beq.w	80039ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003882:	4b83      	ldr	r3, [pc, #524]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a7e      	ldr	r2, [pc, #504]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b7c      	ldr	r3, [pc, #496]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b79      	ldr	r3, [pc, #484]	; (8003a94 <HAL_RCC_OscConfig+0x4b0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d118      	bne.n	80038ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ba:	4b76      	ldr	r3, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x4b0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a75      	ldr	r2, [pc, #468]	; (8003a94 <HAL_RCC_OscConfig+0x4b0>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c6:	f7fd ff09 	bl	80016dc <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ce:	f7fd ff05 	bl	80016dc <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e118      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	4b6c      	ldr	r3, [pc, #432]	; (8003a94 <HAL_RCC_OscConfig+0x4b0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f0      	beq.n	80038ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x31e>
 80038f4:	4b66      	ldr	r3, [pc, #408]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003900:	e01c      	b.n	800393c <HAL_RCC_OscConfig+0x358>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b05      	cmp	r3, #5
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x340>
 800390a:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a60      	ldr	r2, [pc, #384]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a5d      	ldr	r2, [pc, #372]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0x358>
 8003924:	4b5a      	ldr	r3, [pc, #360]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a59      	ldr	r2, [pc, #356]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
 8003930:	4b57      	ldr	r3, [pc, #348]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003936:	f023 0304 	bic.w	r3, r3, #4
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd feca 	bl	80016dc <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fd fec6 	bl	80016dc <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0d7      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003962:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0ee      	beq.n	800394c <HAL_RCC_OscConfig+0x368>
 800396e:	e014      	b.n	800399a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fd feb4 	bl	80016dc <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fd feb0 	bl	80016dc <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	; 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0c1      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398e:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1ee      	bne.n	8003978 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80ad 	beq.w	8003b10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d060      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d145      	bne.n	8003a56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_RCC_OscConfig+0x4b4>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fd fe84 	bl	80016dc <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fd fe80 	bl	80016dc <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e093      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69da      	ldr	r2, [r3, #28]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	061b      	lsls	r3, r3, #24
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	071b      	lsls	r3, r3, #28
 8003a22:	491b      	ldr	r1, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x4b4>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fe55 	bl	80016dc <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fd fe51 	bl	80016dc <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e064      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x452>
 8003a54:	e05c      	b.n	8003b10 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x4b4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fe3e 	bl	80016dc <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd fe3a 	bl	80016dc <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e04d      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x4ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x480>
 8003a82:	e045      	b.n	8003b10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e040      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000
 8003a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_RCC_OscConfig+0x538>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d129      	bne.n	8003b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d122      	bne.n	8003b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d119      	bne.n	8003b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10f      	bne.n	8003b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e041      	b.n	8003bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fc9c 	bl	8001484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f000 f9a8 	bl	8003eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d001      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e046      	b.n	8003c66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <HAL_TIM_Base_Start+0xb4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d022      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d01d      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_TIM_Base_Start+0xb8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <HAL_TIM_Base_Start+0xbc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	; (8003c80 <HAL_TIM_Base_Start+0xc0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	; (8003c84 <HAL_TIM_Base_Start+0xc4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIM_Base_Start+0xc8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_TIM_Base_Start+0x70>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <HAL_TIM_Base_Start+0xcc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d010      	beq.n	8003c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c52:	e007      	b.n	8003c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40010400 	.word	0x40010400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800

08003c90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_TIM_Base_Stop+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	f240 4344 	movw	r3, #1092	; 0x444
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_Base_Stop+0x38>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_GenerateEvent+0x18>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e014      	b.n	8003d20 <HAL_TIM_GenerateEvent+0x42>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_TIM_ConfigClockSource+0x18>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e0b3      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x180>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d03e      	beq.n	8003dfc <HAL_TIM_ConfigClockSource+0xd0>
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	f200 8087 	bhi.w	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	f000 8085 	beq.w	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d87f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d01a      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xa2>
 8003d98:	2b70      	cmp	r3, #112	; 0x70
 8003d9a:	d87b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d050      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x116>
 8003da0:	2b60      	cmp	r3, #96	; 0x60
 8003da2:	d877      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003da4:	2b50      	cmp	r3, #80	; 0x50
 8003da6:	d03c      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0xf6>
 8003da8:	2b50      	cmp	r3, #80	; 0x50
 8003daa:	d873      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d058      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x136>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d86f      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d064      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
 8003db8:	2b30      	cmp	r3, #48	; 0x30
 8003dba:	d86b      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d060      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d867      	bhi.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d05c      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d05a      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dcc:	e062      	b.n	8003e94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6899      	ldr	r1, [r3, #8]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f000 f983 	bl	80040e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
      break;
 8003dfa:	e04e      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f000 f96c 	bl	80040e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1e:	609a      	str	r2, [r3, #8]
      break;
 8003e20:	e03b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 f8e0 	bl	8003ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2150      	movs	r1, #80	; 0x50
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f939 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003e40:	e02b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 f8ff 	bl	8004052 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2160      	movs	r1, #96	; 0x60
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f929 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003e60:	e01b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 f8c0 	bl	8003ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2140      	movs	r1, #64	; 0x40
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f919 	bl	80040b2 <TIM_ITRx_SetConfig>
      break;
 8003e80:	e00b      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 f910 	bl	80040b2 <TIM_ITRx_SetConfig>
        break;
 8003e92:	e002      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a40      	ldr	r2, [pc, #256]	; (8003fc8 <TIM_Base_SetConfig+0x114>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed2:	d00f      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <TIM_Base_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3c      	ldr	r2, [pc, #240]	; (8003fd0 <TIM_Base_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d007      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3b      	ldr	r2, [pc, #236]	; (8003fd4 <TIM_Base_SetConfig+0x120>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_Base_SetConfig+0x40>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <TIM_Base_SetConfig+0x124>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2f      	ldr	r2, [pc, #188]	; (8003fc8 <TIM_Base_SetConfig+0x114>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d02b      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d027      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <TIM_Base_SetConfig+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d023      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2b      	ldr	r2, [pc, #172]	; (8003fd0 <TIM_Base_SetConfig+0x11c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01f      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <TIM_Base_SetConfig+0x120>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d01b      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <TIM_Base_SetConfig+0x124>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d017      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a28      	ldr	r2, [pc, #160]	; (8003fdc <TIM_Base_SetConfig+0x128>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a27      	ldr	r2, [pc, #156]	; (8003fe0 <TIM_Base_SetConfig+0x12c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <TIM_Base_SetConfig+0x130>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a25      	ldr	r2, [pc, #148]	; (8003fe8 <TIM_Base_SetConfig+0x134>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a24      	ldr	r2, [pc, #144]	; (8003fec <TIM_Base_SetConfig+0x138>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a23      	ldr	r2, [pc, #140]	; (8003ff0 <TIM_Base_SetConfig+0x13c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <TIM_Base_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d003      	beq.n	8003fac <TIM_Base_SetConfig+0xf8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	; (8003fd8 <TIM_Base_SetConfig+0x124>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d103      	bne.n	8003fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	615a      	str	r2, [r3, #20]
}
 8003fba:	bf00      	nop
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400
 8003fe4:	40014800 	.word	0x40014800
 8003fe8:	40001800 	.word	0x40001800
 8003fec:	40001c00 	.word	0x40001c00
 8003ff0:	40002000 	.word	0x40002000

08003ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	f023 0201 	bic.w	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 030a 	bic.w	r3, r3, #10
 8004030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004052:	b480      	push	{r7}
 8004054:	b087      	sub	sp, #28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0210 	bic.w	r2, r3, #16
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800407c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	031b      	lsls	r3, r3, #12
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800408e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f043 0307 	orr.w	r3, r3, #7
 80040d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
 80040f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	431a      	orrs	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800413c:	2302      	movs	r3, #2
 800413e:	e05a      	b.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a21      	ldr	r2, [pc, #132]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d022      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d01d      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a18      	ldr	r2, [pc, #96]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a15      	ldr	r2, [pc, #84]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10c      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40010400 	.word	0x40010400
 8004218:	40014000 	.word	0x40014000
 800421c:	40001800 	.word	0x40001800

08004220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e03f      	b.n	80042b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd f968 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fc7b 	bl	8004b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695a      	ldr	r2, [r3, #20]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08a      	sub	sp, #40	; 0x28
 80042be:	af02      	add	r7, sp, #8
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d17c      	bne.n	80043d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_UART_Transmit+0x2c>
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e075      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_Transmit+0x3e>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e06e      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	; 0x21
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430e:	f7fd f9e5 	bl	80016dc <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d108      	bne.n	800433c <HAL_UART_Transmit+0x82>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800434c:	e02a      	b.n	80043a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	2180      	movs	r1, #128	; 0x80
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa3d 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e036      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3302      	adds	r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e007      	b.n	8004396 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	3301      	adds	r3, #1
 8004394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1cf      	bne.n	800434e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	; 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fa0d 	bl	80047d8 <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e006      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d11d      	bne.n	8004434 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Receive_IT+0x26>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e016      	b.n	8004436 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_UART_Receive_IT+0x38>
 8004412:	2302      	movs	r3, #2
 8004414:	e00f      	b.n	8004436 <HAL_UART_Receive_IT+0x58>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	461a      	mov	r2, r3
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fa1e 	bl	800486c <UART_Start_Receive_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	e000      	b.n	8004436 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_UART_IRQHandler+0x52>
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fad1 	bl	8004a32 <UART_Receive_IT>
      return;
 8004490:	e17c      	b.n	800478c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80b1 	beq.w	80045fc <HAL_UART_IRQHandler+0x1bc>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <HAL_UART_IRQHandler+0x70>
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_UART_IRQHandler+0x90>
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0201 	orr.w	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_UART_IRQHandler+0xb0>
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f043 0202 	orr.w	r2, r3, #2
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_UART_IRQHandler+0xd0>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f043 0204 	orr.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00f      	beq.n	800453a <HAL_UART_IRQHandler+0xfa>
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_UART_IRQHandler+0xee>
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0208 	orr.w	r2, r3, #8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 811f 	beq.w	8004782 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <HAL_UART_IRQHandler+0x11e>
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fa6a 	bl	8004a32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_UART_IRQHandler+0x146>
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d031      	beq.n	80045ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9aa 	bl	80048e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d123      	bne.n	80045e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d013      	beq.n	80045da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	4a77      	ldr	r2, [pc, #476]	; (8004794 <HAL_UART_IRQHandler+0x354>)
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe f88c 	bl	80026dc <HAL_DMA_Abort_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d016      	beq.n	80045f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d4:	4610      	mov	r0, r2
 80045d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	e00e      	b.n	80045f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8e6 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	e00a      	b.n	80045f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8e2 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e8:	e006      	b.n	80045f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8de 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045f6:	e0c4      	b.n	8004782 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	bf00      	nop
    return;
 80045fa:	e0c2      	b.n	8004782 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	2b01      	cmp	r3, #1
 8004602:	f040 80a2 	bne.w	800474a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 809c 	beq.w	800474a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8096 	beq.w	800474a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	d14f      	bne.n	80046e2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800464c:	8a3b      	ldrh	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8099 	beq.w	8004786 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004658:	8a3a      	ldrh	r2, [r7, #16]
 800465a:	429a      	cmp	r2, r3
 800465c:	f080 8093 	bcs.w	8004786 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8a3a      	ldrh	r2, [r7, #16]
 8004664:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004670:	d02b      	beq.n	80046ca <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004680:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0210 	bic.w	r2, r2, #16
 80046be:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fd ff99 	bl	80025fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f870 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046e0:	e051      	b.n	8004786 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d047      	beq.n	800478a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80046fa:	8a7b      	ldrh	r3, [r7, #18]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d044      	beq.n	800478a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800470e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0210 	bic.w	r2, r2, #16
 800473c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800473e:	8a7b      	ldrh	r3, [r7, #18]
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f83c 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004748:	e01f      	b.n	800478a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_UART_IRQHandler+0x326>
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8ff 	bl	8004962 <UART_Transmit_IT>
    return;
 8004764:	e012      	b.n	800478c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <HAL_UART_IRQHandler+0x34c>
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f941 	bl	8004a02 <UART_EndTransmit_IT>
    return;
 8004780:	e004      	b.n	800478c <HAL_UART_IRQHandler+0x34c>
    return;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <HAL_UART_IRQHandler+0x34c>
      return;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <HAL_UART_IRQHandler+0x34c>
      return;
 800478a:	bf00      	nop
  }
}
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	0800493b 	.word	0x0800493b

08004798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	e02c      	b.n	8004844 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d028      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x30>
 80047f8:	f7fc ff70 	bl	80016dc <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d21d      	bcs.n	8004844 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004816:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e00f      	b.n	8004864 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	429a      	cmp	r2, r3
 8004860:	d0c3      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2222      	movs	r2, #34	; 0x22
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0220 	orr.w	r2, r2, #32
 80048d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	2b01      	cmp	r3, #1
 800490e:	d107      	bne.n	8004920 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0210 	bic.w	r2, r2, #16
 800491e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff ff29 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d13e      	bne.n	80049f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	d114      	bne.n	80049aa <UART_Transmit_IT+0x48>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d110      	bne.n	80049aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	1c9a      	adds	r2, r3, #2
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]
 80049a8:	e008      	b.n	80049bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	1c59      	adds	r1, r3, #1
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6211      	str	r1, [r2, #32]
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4619      	mov	r1, r3
 80049ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10f      	bne.n	80049f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff feb8 	bl	8004798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b22      	cmp	r3, #34	; 0x22
 8004a44:	f040 8087 	bne.w	8004b56 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a50:	d117      	bne.n	8004a82 <UART_Receive_IT+0x50>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d113      	bne.n	8004a82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	1c9a      	adds	r2, r3, #2
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a80:	e026      	b.n	8004ad0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a94:	d007      	beq.n	8004aa6 <UART_Receive_IT+0x74>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <UART_Receive_IT+0x82>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	e008      	b.n	8004ac6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4619      	mov	r1, r3
 8004ade:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d136      	bne.n	8004b52 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0220 	bic.w	r2, r2, #32
 8004af2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10e      	bne.n	8004b42 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0210 	bic.w	r2, r2, #16
 8004b32:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fe40 	bl	80047c0 <HAL_UARTEx_RxEventCallback>
 8004b40:	e002      	b.n	8004b48 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fb00 	bl	8001148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e002      	b.n	8004b58 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e000      	b.n	8004b58 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
  }
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b0c0      	sub	sp, #256	; 0x100
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	68d9      	ldr	r1, [r3, #12]
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	ea40 0301 	orr.w	r3, r0, r1
 8004b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bb8:	f021 010c 	bic.w	r1, r1, #12
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	6999      	ldr	r1, [r3, #24]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	ea40 0301 	orr.w	r3, r0, r1
 8004be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b8f      	ldr	r3, [pc, #572]	; (8004e2c <UART_SetConfig+0x2cc>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0xa0>
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b8d      	ldr	r3, [pc, #564]	; (8004e30 <UART_SetConfig+0x2d0>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7fe faac 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 8004c04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c08:	e003      	b.n	8004c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0a:	f7fe fa93 	bl	8003134 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c1c:	f040 810c 	bne.w	8004e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c42:	4621      	mov	r1, r4
 8004c44:	eb12 0801 	adds.w	r8, r2, r1
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb43 0901 	adc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c70:	462b      	mov	r3, r5
 8004c72:	eb49 0303 	adc.w	r3, r9, r3
 8004c76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c8e:	460b      	mov	r3, r1
 8004c90:	18db      	adds	r3, r3, r3
 8004c92:	653b      	str	r3, [r7, #80]	; 0x50
 8004c94:	4613      	mov	r3, r2
 8004c96:	eb42 0303 	adc.w	r3, r2, r3
 8004c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ca4:	f7fb faae 	bl	8000204 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	011c      	lsls	r4, r3, #4
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	1891      	adds	r1, r2, r2
 8004cce:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cd8:	4641      	mov	r1, r8
 8004cda:	eb12 0a01 	adds.w	sl, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf8:	4692      	mov	sl, r2
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	4643      	mov	r3, r8
 8004cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8004d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d06:	464b      	mov	r3, r9
 8004d08:	eb4b 0303 	adc.w	r3, fp, r3
 8004d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d24:	460b      	mov	r3, r1
 8004d26:	18db      	adds	r3, r3, r3
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	647b      	str	r3, [r7, #68]	; 0x44
 8004d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d3a:	f7fb fa63 	bl	8000204 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <UART_SetConfig+0x2d4>)
 8004d46:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2264      	movs	r2, #100	; 0x64
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	1acb      	subs	r3, r1, r3
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d5a:	4b36      	ldr	r3, [pc, #216]	; (8004e34 <UART_SetConfig+0x2d4>)
 8004d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d68:	441c      	add	r4, r3
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d84:	415b      	adcs	r3, r3
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	1851      	adds	r1, r2, r1
 8004d90:	6339      	str	r1, [r7, #48]	; 0x30
 8004d92:	4649      	mov	r1, r9
 8004d94:	414b      	adcs	r3, r1
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004da4:	4659      	mov	r1, fp
 8004da6:	00cb      	lsls	r3, r1, #3
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dae:	4651      	mov	r1, sl
 8004db0:	00ca      	lsls	r2, r1, #3
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	4642      	mov	r2, r8
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de0:	460b      	mov	r3, r1
 8004de2:	18db      	adds	r3, r3, r3
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de6:	4613      	mov	r3, r2
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004df6:	f7fb fa05 	bl	8000204 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <UART_SetConfig+0x2d4>)
 8004e00:	fba3 1302 	umull	r1, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2164      	movs	r1, #100	; 0x64
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	3332      	adds	r3, #50	; 0x32
 8004e12:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <UART_SetConfig+0x2d4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 0207 	and.w	r2, r3, #7
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4422      	add	r2, r4
 8004e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e28:	e105      	b.n	8005036 <UART_SetConfig+0x4d6>
 8004e2a:	bf00      	nop
 8004e2c:	40011000 	.word	0x40011000
 8004e30:	40011400 	.word	0x40011400
 8004e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	6239      	str	r1, [r7, #32]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	1854      	adds	r4, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb43 0501 	adc.w	r5, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	00eb      	lsls	r3, r5, #3
 8004e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e72:	00e2      	lsls	r2, r4, #3
 8004e74:	4614      	mov	r4, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	18e3      	adds	r3, r4, r3
 8004e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e80:	464b      	mov	r3, r9
 8004e82:	eb45 0303 	adc.w	r3, r5, r3
 8004e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	008b      	lsls	r3, r1, #2
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	008a      	lsls	r2, r1, #2
 8004eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004eb8:	f7fb f9a4 	bl	8000204 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4b60      	ldr	r3, [pc, #384]	; (8005044 <UART_SetConfig+0x4e4>)
 8004ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	011c      	lsls	r4, r3, #4
 8004eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ed4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	1891      	adds	r1, r2, r2
 8004ee2:	61b9      	str	r1, [r7, #24]
 8004ee4:	415b      	adcs	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eec:	4641      	mov	r1, r8
 8004eee:	1851      	adds	r1, r2, r1
 8004ef0:	6139      	str	r1, [r7, #16]
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	414b      	adcs	r3, r1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f04:	4659      	mov	r1, fp
 8004f06:	00cb      	lsls	r3, r1, #3
 8004f08:	4651      	mov	r1, sl
 8004f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0e:	4651      	mov	r1, sl
 8004f10:	00ca      	lsls	r2, r1, #3
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	4642      	mov	r2, r8
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f20:	464b      	mov	r3, r9
 8004f22:	460a      	mov	r2, r1
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f44:	4649      	mov	r1, r9
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4e:	4641      	mov	r1, r8
 8004f50:	008a      	lsls	r2, r1, #2
 8004f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f56:	f7fb f955 	bl	8000204 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4b39      	ldr	r3, [pc, #228]	; (8005044 <UART_SetConfig+0x4e4>)
 8004f60:	fba3 1302 	umull	r1, r3, r3, r2
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	2164      	movs	r1, #100	; 0x64
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	3332      	adds	r3, #50	; 0x32
 8004f72:	4a34      	ldr	r2, [pc, #208]	; (8005044 <UART_SetConfig+0x4e4>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f7e:	441c      	add	r4, r3
 8004f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f84:	2200      	movs	r2, #0
 8004f86:	673b      	str	r3, [r7, #112]	; 0x70
 8004f88:	677a      	str	r2, [r7, #116]	; 0x74
 8004f8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f8e:	4642      	mov	r2, r8
 8004f90:	464b      	mov	r3, r9
 8004f92:	1891      	adds	r1, r2, r2
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	415b      	adcs	r3, r3
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	1851      	adds	r1, r2, r1
 8004fa2:	6039      	str	r1, [r7, #0]
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	414b      	adcs	r3, r1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb6:	4659      	mov	r1, fp
 8004fb8:	00cb      	lsls	r3, r1, #3
 8004fba:	4651      	mov	r1, sl
 8004fbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc0:	4651      	mov	r1, sl
 8004fc2:	00ca      	lsls	r2, r1, #3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4603      	mov	r3, r0
 8004fca:	4642      	mov	r2, r8
 8004fcc:	189b      	adds	r3, r3, r2
 8004fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	eb42 0303 	adc.w	r3, r2, r3
 8004fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fe4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	008b      	lsls	r3, r1, #2
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	008a      	lsls	r2, r1, #2
 8005000:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005004:	f7fb f8fe 	bl	8000204 <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <UART_SetConfig+0x4e4>)
 800500e:	fba3 1302 	umull	r1, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2164      	movs	r1, #100	; 0x64
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	3332      	adds	r3, #50	; 0x32
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <UART_SetConfig+0x4e4>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4422      	add	r2, r4
 8005034:	609a      	str	r2, [r3, #8]
}
 8005036:	bf00      	nop
 8005038:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800503c:	46bd      	mov	sp, r7
 800503e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005042:	bf00      	nop
 8005044:	51eb851f 	.word	0x51eb851f

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4d0d      	ldr	r5, [pc, #52]	; (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2600      	movs	r6, #0
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4d0b      	ldr	r5, [pc, #44]	; (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	; (800508c <__libc_init_array+0x44>)
 800505c:	f000 f820 	bl	80050a0 <_init>
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2600      	movs	r6, #0
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	08005100 	.word	0x08005100
 8005084:	08005100 	.word	0x08005100
 8005088:	08005100 	.word	0x08005100
 800508c:	08005104 	.word	0x08005104

08005090 <memset>:
 8005090:	4402      	add	r2, r0
 8005092:	4603      	mov	r3, r0
 8005094:	4293      	cmp	r3, r2
 8005096:	d100      	bne.n	800509a <memset+0xa>
 8005098:	4770      	bx	lr
 800509a:	f803 1b01 	strb.w	r1, [r3], #1
 800509e:	e7f9      	b.n	8005094 <memset+0x4>

080050a0 <_init>:
 80050a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a2:	bf00      	nop
 80050a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050a6:	bc08      	pop	{r3}
 80050a8:	469e      	mov	lr, r3
 80050aa:	4770      	bx	lr

080050ac <_fini>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	bf00      	nop
 80050b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b2:	bc08      	pop	{r3}
 80050b4:	469e      	mov	lr, r3
 80050b6:	4770      	bx	lr
